import platform
import subprocess
import re
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

def check_linux_version():
    return platform.uname().release

def run_bash_script(script_path):
    try:
        subprocess.run(['bash', script_path], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error running the script: {e}")

def is_vulnerable_kernel(version):
    vulnerable_ranges = [
        ((5, 8), (5, 16, 11)),  # Range: 5.8 to 5.16.11
    ]
    
    vulnerable_versions = [
        (5, 15, 25),
        (5, 10, 102),
        # Add more vulnerable versions as needed
    ]
    
    return any(start <= version <= end for start, end in vulnerable_ranges) or version in vulnerable_versions

def parse_version(version_string):
    match = re.match(r'^(\d+)\.(\d+)(?:\.(\d+))?(?:-(\w+))?', version_string)
    if match:
        major_version = int(match.group(1))
        minor_version = int(match.group(2))
        return major_version, minor_version, match.group(3), match.group(4)
    return None

def select_script(version):
    scripts = {}
    f = open(current_dir + '/versions.txt', "r")
    texts = f.read().split("\n")
    f.close()
    
    for text in texts:
        if text.strip() == "":
            continue
        minVer = tuple(map(int, text.split(" | ")[0].split('.')))
        maxVer = tuple(map(int, text.split(" | ")[1].split('.')))
        script = text.split(" | ")[2]
        scripts[(minVer, maxVer)] = script

    result = []
    for version_range, script_path in scripts.items():
        start_version, end_version = version_range
        if start_version <= version <= end_version:
            result.append(script_path)
    return result

if __name__ == "__main__":
    if not os.path.exists(current_dir + '/versions.txt'):
        print("[ERROR] versions.txt not exist")
        exit(-1)
    # Check Linux version
    linux_version = check_linux_version()
    print(f"Linux version: {linux_version}")

    # Parse the version to extract the non-generic part
    version_tuple = parse_version(linux_version)
    if version_tuple:
        major_version, minor_version, _, _ = version_tuple

        # Check if the OS has "generic" in its release
        is_generic = "generic" in linux_version

        # Select and run Bash scripts based on the Linux version and generic flag
        selected_scripts = []
        if is_generic or is_vulnerable_kernel((major_version, minor_version)):
            selected_scripts = select_script((major_version, minor_version))

        if selected_scripts:
            for selected_script in selected_scripts:
                print(f"Running script: {selected_script}")
                run_bash_script(selected_script)
            print("[!] Update your system with the latest security patches and software updates. Vulnerabilities in outdated software can be exploited by attackers.")
        else:
            print("No script found for this version.")
    else:
        print("Unable to parse Linux version.")
